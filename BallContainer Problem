import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the organizingContainers function below.
    static String organizingContainers(int[][] container) {

        System.out.println("\n");

        LinkedList<Integer> lb = new LinkedList<Integer>();
        LinkedList<Integer> lc = new LinkedList<Integer>();

        int n = container.length;
        int temp = 0;

        // linkedList of Balls

        for(int j = 0 ;j<n ; j++){

            temp = 0;
              //column no

            for(int i = 0; i<n ; i++){ //row no

                if(i == 0){
                    lb.addFirst(container[0][j]);
                    temp = lb.get(0);
                }

                else{
                    temp = lb.get(0);
                    lb.remove(0);
                    temp = temp + container[i][j];
                    lb.addFirst(temp);
                    temp =0;
                }

            }

        }

        //Linked List of Containers

        for (int j = 0; j < n; j++) {   //row no

        temp = 0;

            for (int i = 0; i < n; i++) {   //column no

                if (i == 0) {
                    lc.addFirst(container[j][0]);
                    temp = lc.get(0);
                }

                else {
                    temp = lc.get(0);
                    lc.remove(0);
                    temp = temp + container[j][i];
                    lc.addFirst(temp);
                    temp = 0;
                }

            }

        }

        // Compare

        Collections.sort(lb);
        Collections.sort(lc);

        System.out.println(lb);
        System.out.println(lc);

        int flag = 0;

        // if(lb.get(0) == lb.get(0)){
        //     return "Possible";
        // }
        // return "no";

        int counter =0;

        for(int i = 0 ;i<n ; i++){
            
            if(lb.get(i) == lc.get(i)){
                flag = 0;
                counter++;
                //break;
            }
            else{
                flag =1;
                break;
            }
        }

        System.out.println(counter);

        lb.clear();
        lc.clear();

        if(flag == 0){
            return "Possible";
        }

        return "Impossible";

}



    

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            int n = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            int[][] container = new int[n][n];

            for (int i = 0; i < n; i++) {
                String[] containerRowItems = scanner.nextLine().split(" ");
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

                for (int j = 0; j < n; j++) {
                    int containerItem = Integer.parseInt(containerRowItems[j]);
                    container[i][j] = containerItem;
                }
            }

            String result = organizingContainers(container);

            bufferedWriter.write(result);
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
